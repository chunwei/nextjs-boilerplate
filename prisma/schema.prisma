// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

/// 添加自定义类型
model ChatbotStyles {
  id                          String   @id @default(cuid())
  theme                       String?
  chat_icon                   String?
  button_color                String?
  display_name                String?
  align_chat_button           String?
  user_message_color          String?
  regenerate_messages         Boolean?
  profile_picture_file        String?
  collect_user_feedback       Boolean?
  auto_open_chat_window_after Int?
  message_placeholder         String?
  header_color                String?
  footer                      String?

  chatbot   Chatbot?
  chatbotId String?  @unique

  @@map("styles")
  @@schema("chat")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["chat", "auth"]
}

model Message {
  id        String   @id @default(cuid())
  role      String // 'user' 或 'assistant'
  content   String   @db.Text
  chatId    String // 格式: userId:provider
  createdAt DateTime @default(now())

  @@index([chatId])
  @@map("messages")
  @@schema("chat")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  password      String? // 添加密码字段
  emailVerified DateTime?
  image         String?
  defaultTeam   String?
  accounts      Account[]
  sessions      Session[]
  teams         TeamMember[]

  @@schema("auth")
}

model Team {
  id        String       @id @default(cuid())
  name      String
  url       String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  members   TeamMember[]
  chatbots  Chatbot[]

  @@schema("chat")
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      String // OWNER, ADMIN, MEMBER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@schema("chat")
}

model Chatbot {
  id              String    @id @default(cuid())
  name            String
  visibility      String    @default("private")
  created_at      DateTime  @default(now())
  team_id         String
  index_name      String?
  status          String    @default("trained")
  last_trained_at DateTime?

  // 配置相关字段
  instructions       String?
  allowed_domains    String[]
  ip_limit           Int?
  ip_limit_timeframe Int?
  ip_limit_message   String?
  suggested_messages String[]
  initial_messages   String[]

  // 模型相关
  model           String @default("gpt-4")
  temp            Float  @default(0)
  embedding_model String @default("text-embedding-3-large")

  // 样式配置
  styles   ChatbotStyles? @relation(fields: [stylesId], references: [id])
  stylesId String?        @unique

  // 其他配置
  collect_leads_settings Json?
  notifications_settings Json?
  retraining_interval    Int?
  custom_domains         String[]
  analytics_sector       String?
  freeze_topics          Boolean  @default(false)
  credits_limit          Int?
  credits_used           Int      @default(0)
  Team                   Team?    @relation(fields: [team_id], references: [id])

  @@index([team_id])
  @@schema("chat")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@schema("auth")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@schema("auth")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
  @@schema("auth")
}
