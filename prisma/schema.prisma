// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["chat", "auth"]
}

model Message {
  id        String   @id @default(cuid())
  role      String   // 'user' 或 'assistant'
  content   String   @db.Text
  chatId    String   // 格式: userId:provider
  createdAt DateTime @default(now())

  @@index([chatId])
  @@map("messages")
  @@schema("chat")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?   // 添加密码字段
  emailVerified DateTime?
  image         String?
  defaultTeam   String?
  accounts      Account[]
  sessions      Session[]
  teams         TeamMember[]

  @@schema("auth")
}

model Team {
  id        String      @id @default(cuid())
  name      String
  url       String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  members   TeamMember[]
  chatbots  Chatbot[]

  @@schema("chat")
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      String   // OWNER, ADMIN, MEMBER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@schema("chat")
}

model Chatbot {
  id        String   @id @default(cuid())
  name      String
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@schema("chat")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@schema("auth")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@schema("auth")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
  @@schema("auth")
}